var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SampleChainsDynamicHMC","category":"page"},{"location":"#SampleChainsDynamicHMC","page":"Home","title":"SampleChainsDynamicHMC","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SampleChainsDynamicHMC]","category":"page"},{"location":"#SampleChainsDynamicHMC.dynamichmc-Tuple{}","page":"Home","title":"SampleChainsDynamicHMC.dynamichmc","text":"dynamichmc(\n  ; init          = ()\n  , warmup_stages = DynamicHMC.default_warmup_stages()\n  , algorithm     = DynamicHMC.NUTS()\n  , reporter      = DynamicHMC.NoProgressReport()\n  , ad_backend    = Val(:ForwardDiff)\n)\n\ninit: a NamedTuple that can contain the following fields (all of them optional and provided with reasonable defaults): \n\nq: initial position. Default: random (uniform [-2,2] for each coordinate).\nκ: kinetic energy specification. Default: Gaussian with identity matrix.\nϵ: a scalar for initial step size, or nothing for heuristic finders.\n\nwarmup_stages: a sequence of warmup stages. See DynamicHMC.default_warmup_stages and DynamicHMC.fixed_stepsize_warmup_stages; the latter requires an ϵ in initialization. \n\nalgorithm: see DynamicHMC.NUTS. It is very unlikely you need to modify this, except perhaps for the maximum depth. \n\nreporter: how progress is reported. This is currently silent by default (see DynamicHMC.NoProgressReport), but this default will likely change in future releases. \n\nad_backend: The automatic differentiation backend to use for gradient computation, specified as either a symbol or a Val type with a symbol that refers to an AD package. See LogDensityProblems.jl for supported packages, including ForwardDiff, ReverseDiff, Zygote, and Tracker.\n\nFor more details see https://tamaspapp.eu/DynamicHMC.jl/stable/interface/\n\nExample\n\njulia> using LinearAlgebra, ReverseDiff\n\njulia> config = dynamichmc(\n           warmup_stages=default_warmup_stages(\n               M=Symmetric, # adapt dense positive definite metric\n               stepsize_adaptation=DualAveraging(δ=0.9), # target acceptance rate 0.9\n               doubling_stages=7, # 7-stage metric adaptation\n           ),\n           reporter=LogProgressReport(), # log progress using Logging\n           ad_backend=Val(:ReverseDiff), # use ReverseDiff AD package\n       );\n\n\n\n\n\n","category":"method"}]
}
